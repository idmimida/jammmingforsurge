{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","renderAction","isRemoval","removeTrack","addTrack","onAdd","track","onRemove","name","artist","album","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessURI","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackURIs","userID","playlistID","method","body","JSON","stringify","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fedc2db.chunk.js","sourcesContent":["const clientID = \"a6da220db2624ca192ba9aa8a9ef5485\";\nconst redirectURI = \"http://thick-beggar.surge.sh\";\n\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    //Check for an access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      //This clears the parameters, allowing us to grab a new access token when it expires\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessURI = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = accessURI;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      },\n    })\n      .then((response) => {\n          return response.json();\n      })\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n          return jsonResponse.tracks.items.map((track) => ({\n            //为什么要有items??\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          }));\n      });\n  },\n\n  savePlaylist(name, trackURIs) {\n    if (!name || !trackURIs) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    let userID;\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        userID = jsonResponse.id;\n\n        let playlistID;\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n          method: \"POST\",\n          headers: headers,\n          body: JSON.stringify({ name: name })\n        })\n          .then((response) => {\n            return response.json();\n          })\n          .then((jsonResponse) => {\n            playlistID = jsonResponse.id;\n            \n            return fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\n                method: 'POST',\n                headers: headers,\n                body: JSON.stringify({ uris: trackURIs })\n            });\n          });\n      });\n  }\n\n};\n\nexport default Spotify;\n","import React from 'react';\nimport './SearchBar.css';\n\nexport class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: ''\n    }\n\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n    //为什么this.state可以出现在子组件里？？？\n    //要干嘛，就只为显示在终端？？\n  }\n\n  handleTermChange(e) {\n    this.setState({\n      //子组件设置的是什么state？？？\n      term: e.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Track.css\";\n\nexport class Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  renderAction = () => {\n    if (this.props.isRemoval) {\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>;\n      //将本js文件中的removeTrack方法作为event handler挂在-号按钮上\n    } else {\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\n      //将本js文件中的addTrack方法作为event handler挂在+号按钮上\n    }\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n    //将选中的track传递进自App.js->SearchResults.js->TrackList.js获得的state change方法onAdd中，以验证其id是否与现有id相同，不同则添加，相同则不添加（详见App.js中的addTrack方法）\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n    //将选中的track传递进自App.js->Playlist.js->TrackList.js获得的state change方法onRemove中，以验证id其是否与选中的曲目相同，相同则不添加（详见App.js中的removeTrack方法）\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n          {/* 将从App.js->SearchResults.js->TrackList.js中获得的搜索结果按prop-name分项渲染 */}\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}","import React from \"react\";\nimport './TrackList.css';\nimport { Track } from \"../Track/Track\";\n\nexport class TrackList extends React.Component {\n    render() {\n        return (\n          <div className=\"TrackList\">\n            {\n              this.props.tracks.map(track => <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />)\n              //.map()返回一个新的数组\n              //将从App.js->SearchResults.js及Playlist.js中获得的搜索结果传递给Track.js，并且让结果中的对象分别在Track.js中得到渲染\n              //将从App.js->SearchResults.js中获得的state change method传递给Track.js，以用作Track.js中event handler的回调函数\n              //将从App.js->Playlist.js中获得的state change method传递给Track.js，以用作Track.js中event handler的回调函数\n              //将从ASearchResults及Playlist.js中获得的isRemoval值传递给Track.js，以在Track.js中和+号或-号按钮关联\n            }\n          </div>\n        );\n    }\n}","import React from \"react\";\nimport \"./SearchResults.css\";\nimport { TrackList } from \"../TrackList/TrackList\";\n\nexport class SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\n        {/* 将从App.js中获得的搜索结果传递给TrackList.js */}\n        {/* 将从App.js中获得的state change method传递给TrackList.js */}\n        {/* 将isRemoval值传递给TrackList.js并一步传递给Track.js，以在Track.js中和+号按钮关联 */}\n      </div>\n    );\n  }\n}","import React from \"react\";\nimport \"./Playlist.css\";\nimport { TrackList } from \"../TrackList/TrackList\";\n\nexport class Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(e) {\n    this.props.onNameChange(e.target.value);\n    //将事件目标传入从App.js中获得的state change method\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n        {/* 将本js文件中的handleNameChange作为event handler，以使input中输入的文字变为App保存的playlist名（注意e的触发并非点击保存，而是在输入框中输入文字） */}\n        <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\n        {/* 将从App.js获得的playlist内容传递给TrackList.js，注意此处prop-name需得是TrackList.js中会获得的prop-name，并非App.js中发出的state-name */}\n        {/* 将从App.js中获得的state change method传递给TrackList.js */}\n        {/* 将isRemoval值传递给TrackList.js并一步传递给Track.js，以在Track.js中和-号按钮关联 */}\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n        {/* 将从App.js中获得的onSave方法作为event handler用以保存playlist */}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { SearchBar } from \"../SearchBar/SearchBar\";\nimport { SearchResults } from \"../SearchResults/SearchResults\";\nimport { Playlist } from \"../Playlist/Playlist\";\nimport Spotify from \"../../util/Spotify\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n        // //在本js文件中设置由Spotify API获取结果，传递给其他组件渲染\n      playlistName: \"My Playlist\",\n      playlistTracks: [],\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find((savedTrack) => {\n      return savedTrack.id === track.id;\n    })) {\n      //find后括号内的形参代表数组中的元素，名字可以随便起，此处起为savedTrack\n      return;\n    } else {\n      tracks.push(track);\n      this.setState({ playlistTracks: tracks });\n      //执行本方法后自动更新（渲染）PlaylistTracks的内容\n    }\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n      tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n      //filter后括号内的形参代表数组中的元素，名字可以随便起，此处起为currentTrack\n      //当playlistTracks中的某对象的id等于选中的对象（即track）的id时，该id的track被筛出新的tracks之列，也即删去了该track\n      this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    })\n    //将输入的playlist名变为App保存的最新playlist名\n  }\n\n  savePlaylist() {\n    // alert('this method is linked to the button correctly');\n    // 上面一行可用来检查按钮是否与父组件中传递而来的方法成功关联 \n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n search(term) {\n    Spotify.search(term).then(searchResults => {\n      //作为形参的searchResults是一个自设的新变量\n      this.setState({ searchResults: searchResults});\n      //前一个是this.state.searchResults，后一个是自设形参的实参\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            {/* 将搜索结果传递给SearchResult.js...最终在Track组件中得到渲染 */}\n            {/* 将addTrack方法作为state change method传递给SearchResult.js */}\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n            {/* 将playlist内容传递给Playlist.js...最终在Track组件中得到渲染 */}\n            {/* 将removeTrack方法作为state change method传递给Playlist.js */}\n            {/* 将onNameChange方法作为state change method传递给Playlist.js，并在该处渲染 */}\n            {/* 将onSave方法传递给Playlist.js */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
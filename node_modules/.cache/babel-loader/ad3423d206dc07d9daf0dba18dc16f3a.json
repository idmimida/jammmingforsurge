{"ast":null,"code":"const clientID = \"a6da220db2624ca192ba9aa8a9ef5485\";\nconst redirectURI = \"http://localhost:3000/\";\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } //Check for an access token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); //This clears the parameters, allowing us to grab a new access token when it expires\n\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessURI = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = accessURI;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    const endpoint = `https://api.spotify.com/v1/search?type=track&q=${term}`;\n    return fetch(endpoint, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      } else {\n        return jsonResponse.tracks.items.map(track => ({\n          //为什么要有items??\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      }\n    });\n  },\n\n  savePlaylist(name, trackURIs) {\n    if (!name || !trackURIs) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userID;\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      headers: headers\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      userID = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => {\n        return response.json();\n      }).then(jsonResponse => {\n        let playlistID;\n        playlistID = jsonResponse.id;\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/dan/Documents/Study/Coding/Frontend/JavaScript/Practice/ReactApp/jammming/src/util/Spotify.js"],"names":["clientID","redirectURI","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessURI","search","term","endpoint","fetch","headers","Authorization","then","response","ok","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackURIs","userID","method","body","JSON","stringify","playlistID"],"mappings":"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","sourcesContent":["const clientID = \"a6da220db2624ca192ba9aa8a9ef5485\";\nconst redirectURI = \"http://localhost:3000/\";\n\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    //Check for an access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      //This clears the parameters, allowing us to grab a new access token when it expires\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessURI = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = accessURI;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    const endpoint = `https://api.spotify.com/v1/search?type=track&q=${term}`;\n    return fetch(endpoint, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n      })\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) {\n          return [];\n        } else {\n          return jsonResponse.tracks.items.map((track) => ({\n            //为什么要有items??\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri,\n          }));\n        }\n      });\n  },\n\n  savePlaylist(name, trackURIs) {\n    if (!name || !trackURIs) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    let userID;\n\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        userID = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n          method: \"POST\",\n          headers: headers,\n          body: JSON.stringify({ name: name }),\n        })\n          .then((response) => {\n            return response.json();\n          })\n          .then((jsonResponse) => {\n            let playlistID;\n            playlistID = jsonResponse.id;\n          });\n      });\n  },\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/dan/Documents/Study/Coding/Frontend/JavaScript/Practice/ReactApp/jammming/src/Components/App/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { SearchBar } from \"../SearchBar/SearchBar\";\nimport { SearchResults } from \"../SearchResults/SearchResults\";\nimport { Playlist } from \"../Playlist/Playlist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [//在本js文件中设置由Spotify API获取结果，传递给其他组件渲染\n      {\n        name: \"name1\",\n        artist: \"artist1\",\n        album: \"album1\",\n        id: \"id1\"\n      }, {\n        name: \"name2\",\n        artist: \"artist2\",\n        album: \"album2\",\n        id: \"id2\"\n      }, {\n        name: \"name3\",\n        artist: \"artist3\",\n        album: \"album3\",\n        id: \"id3\"\n      }],\n      playlistName: \"My Playlist\",\n      playlistTracks: [{\n        name: \"playlistName1\",\n        artist: \"playlistArtist1\",\n        album: \"playlistAlbum1\",\n        id: \"id4\"\n      }, {\n        name: \"playlistName2\",\n        artist: \"playlistArtist2\",\n        album: \"playlistAlbum2\",\n        id: \"id5\"\n      }, {\n        name: \"playlistName3\",\n        artist: \"playlistArtist3\",\n        album: \"playlistAlbum3\",\n        id: \"id6\"\n      }]\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      //find后括号内的形参代表数组中的元素，名字可以随便起，此处起为savedTrack\n      return;\n    } else {\n      tracks.push(track);\n      this.setState({\n        playlistTracks: tracks\n      }); //执行本方法后自动更新（渲染）PlaylistTracks的内容\n    }\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id); //filter后括号内的形参代表数组中的元素，名字可以随便起，此处起为currentTrack\n    //当playlistTracks中的某对象的id等于选中的对象（即track）的id时，该id的track被筛出新的tracks之列，也即删去了该track\n\n    this.setState({\n      playlistTracks: tracks\n    });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    }); //将输入的playlist名变为App保存的最新playlist名\n  }\n\n  savePlaylist() {\n    // alert('this method is linked to the button correctly');\n    // 上面一行可用来检查按钮是否与父组件中传递而来的方法成功关联 \n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Ja\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: \"mmm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), \"ing\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-playlist\",\n          children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n            searchResults: this.state.searchResults,\n            onAdd: this.addTrack\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n            playlistName: this.state.playlistName,\n            playlistTracks: this.state.playlistTracks,\n            onRemove: this.removeTrack,\n            onNameChange: this.updatePlaylistName,\n            onSave: this.savePlaylist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dan/Documents/Study/Coding/Frontend/JavaScript/Practice/ReactApp/jammming/src/Components/App/App.js"],"names":["React","SearchBar","SearchResults","Playlist","App","Component","constructor","props","state","searchResults","name","artist","album","id","playlistName","playlistTracks","addTrack","bind","removeTrack","updatePlaylistName","savePlaylist","track","tracks","find","savedTrack","push","setState","filter","currentTrack","trackURIs","map","uri","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { SearchBar } from \"../SearchBar/SearchBar\";\nimport { SearchResults } from \"../SearchResults/SearchResults\";\nimport { Playlist } from \"../Playlist/Playlist\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [\n        //在本js文件中设置由Spotify API获取结果，传递给其他组件渲染\n        { name: \"name1\", artist: \"artist1\", album: \"album1\", id: \"id1\" },\n        { name: \"name2\", artist: \"artist2\", album: \"album2\", id: \"id2\" },\n        { name: \"name3\", artist: \"artist3\", album: \"album3\", id: \"id3\" },\n      ],\n      playlistName: \"My Playlist\",\n      playlistTracks: [\n        {\n          name: \"playlistName1\",\n          artist: \"playlistArtist1\",\n          album: \"playlistAlbum1\",\n          id: \"id4\",\n        },\n        {\n          name: \"playlistName2\",\n          artist: \"playlistArtist2\",\n          album: \"playlistAlbum2\",\n          id: \"id5\",\n        },\n        {\n          name: \"playlistName3\",\n          artist: \"playlistArtist3\",\n          album: \"playlistAlbum3\",\n          id: \"id6\",\n        },\n      ],\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find((savedTrack) => savedTrack.id === track.id)) {\n      //find后括号内的形参代表数组中的元素，名字可以随便起，此处起为savedTrack\n      return;\n    } else {\n      tracks.push(track);\n      this.setState({ playlistTracks: tracks });\n      //执行本方法后自动更新（渲染）PlaylistTracks的内容\n    }\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n      tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n      //filter后括号内的形参代表数组中的元素，名字可以随便起，此处起为currentTrack\n      //当playlistTracks中的某对象的id等于选中的对象（即track）的id时，该id的track被筛出新的tracks之列，也即删去了该track\n      this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    })\n    //将输入的playlist名变为App保存的最新playlist名\n  }\n\n  savePlaylist() {\n    // alert('this method is linked to the button correctly');\n    // 上面一行可用来检查按钮是否与父组件中传递而来的方法成功关联 \n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n  }\n\n\n  \n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            {/* 将搜索结果传递给SearchResult.js...最终在Track组件中得到渲染 */}\n            {/* 将addTrack方法作为state change method传递给SearchResult.js */}\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n            {/* 将playlist内容传递给Playlist.js...最终在Track组件中得到渲染 */}\n            {/* 将removeTrack方法作为state change method传递给Playlist.js */}\n            {/* 将onNameChange方法作为state change method传递给Playlist.js，并在该处渲染 */}\n            {/* 将onSave方法传递给Playlist.js */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
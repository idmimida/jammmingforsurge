{"ast":null,"code":"import _classCallCheck from\"/Users/dan/Documents/Study/Coding/Frontend/JavaScript/Practice/ReactApp/jammmingforsurge/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dan/Documents/Study/Coding/Frontend/JavaScript/Practice/ReactApp/jammmingforsurge/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/dan/Documents/Study/Coding/Frontend/JavaScript/Practice/ReactApp/jammmingforsurge/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/dan/Documents/Study/Coding/Frontend/JavaScript/Practice/ReactApp/jammmingforsurge/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/dan/Documents/Study/Coding/Frontend/JavaScript/Practice/ReactApp/jammmingforsurge/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import\"./App.css\";import{SearchBar}from\"../SearchBar/SearchBar\";import{SearchResults}from\"../SearchResults/SearchResults\";import{Playlist}from\"../Playlist/Playlist\";import Spotify from\"../../util/Spotify\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.state={searchResults:[],// //在本js文件中设置由Spotify API获取结果，传递给其他组件渲染\nplaylistName:\"My Playlist\",playlistTracks:[]};_this.addTrack=_this.addTrack.bind(_assertThisInitialized(_this));_this.removeTrack=_this.removeTrack.bind(_assertThisInitialized(_this));_this.updatePlaylistName=_this.updatePlaylistName.bind(_assertThisInitialized(_this));_this.savePlaylist=_this.savePlaylist.bind(_assertThisInitialized(_this));_this.search=_this.search.bind(_assertThisInitialized(_this));return _this;}_createClass(App,[{key:\"addTrack\",value:function addTrack(track){var tracks=this.state.playlistTracks;if(tracks.find(function(savedTrack){return savedTrack.id===track.id;})){//find后括号内的形参代表数组中的元素，名字可以随便起，此处起为savedTrack\nreturn;}else{tracks.push(track);this.setState({playlistTracks:tracks});//执行本方法后自动更新（渲染）PlaylistTracks的内容\n}}},{key:\"removeTrack\",value:function removeTrack(track){var tracks=this.state.playlistTracks;tracks=tracks.filter(function(currentTrack){return currentTrack.id!==track.id;});//filter后括号内的形参代表数组中的元素，名字可以随便起，此处起为currentTrack\n//当playlistTracks中的某对象的id等于选中的对象（即track）的id时，该id的track被筛出新的tracks之列，也即删去了该track\nthis.setState({playlistTracks:tracks});}},{key:\"updatePlaylistName\",value:function updatePlaylistName(name){this.setState({playlistName:name});//将输入的playlist名变为App保存的最新playlist名\n}},{key:\"savePlaylist\",value:function savePlaylist(){var _this2=this;// alert('this method is linked to the button correctly');\n// 上面一行可用来检查按钮是否与父组件中传递而来的方法成功关联 \nvar trackURIs=this.state.playlistTracks.map(function(track){return track.uri;});Spotify.savePlaylist(this.state.playlistName,trackURIs).then(function(){_this2.setState({playlistName:'New Playlist',playlistTracks:[]});});}},{key:\"search\",value:function search(term){var _this3=this;Spotify.search(term).then(function(searchResults){//作为形参的searchResults是一个自设的新变量\n_this3.setState({searchResults:searchResults});//前一个是this.state.searchResults，后一个是自设形参的实参\n});}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"Ja\",/*#__PURE__*/_jsx(\"span\",{className:\"highlight\",children:\"mmm\"}),\"ing\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(SearchBar,{onSearch:this.search}),/*#__PURE__*/_jsxs(\"div\",{className:\"App-playlist\",children:[/*#__PURE__*/_jsx(SearchResults,{searchResults:this.state.searchResults,onAdd:this.addTrack}),/*#__PURE__*/_jsx(Playlist,{playlistName:this.state.playlistName,playlistTracks:this.state.playlistTracks,onRemove:this.removeTrack,onNameChange:this.updatePlaylistName,onSave:this.savePlaylist})]})]})]});}}]);return App;}(React.Component);export default App;","map":{"version":3,"sources":["/Users/dan/Documents/Study/Coding/Frontend/JavaScript/Practice/ReactApp/jammmingforsurge/src/Components/App/App.js"],"names":["React","SearchBar","SearchResults","Playlist","Spotify","App","props","state","searchResults","playlistName","playlistTracks","addTrack","bind","removeTrack","updatePlaylistName","savePlaylist","search","track","tracks","find","savedTrack","id","push","setState","filter","currentTrack","name","trackURIs","map","uri","then","term","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { SearchBar } from \"../SearchBar/SearchBar\";\nimport { SearchResults } from \"../SearchResults/SearchResults\";\nimport { Playlist } from \"../Playlist/Playlist\";\nimport Spotify from \"../../util/Spotify\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n        // //在本js文件中设置由Spotify API获取结果，传递给其他组件渲染\n      playlistName: \"My Playlist\",\n      playlistTracks: [],\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find((savedTrack) => {\n      return savedTrack.id === track.id;\n    })) {\n      //find后括号内的形参代表数组中的元素，名字可以随便起，此处起为savedTrack\n      return;\n    } else {\n      tracks.push(track);\n      this.setState({ playlistTracks: tracks });\n      //执行本方法后自动更新（渲染）PlaylistTracks的内容\n    }\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n      tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n      //filter后括号内的形参代表数组中的元素，名字可以随便起，此处起为currentTrack\n      //当playlistTracks中的某对象的id等于选中的对象（即track）的id时，该id的track被筛出新的tracks之列，也即删去了该track\n      this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    })\n    //将输入的playlist名变为App保存的最新playlist名\n  }\n\n  savePlaylist() {\n    // alert('this method is linked to the button correctly');\n    // 上面一行可用来检查按钮是否与父组件中传递而来的方法成功关联 \n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n search(term) {\n    Spotify.search(term).then(searchResults => {\n      //作为形参的searchResults是一个自设的新变量\n      this.setState({ searchResults: searchResults});\n      //前一个是this.state.searchResults，后一个是自设形参的实参\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            {/* 将搜索结果传递给SearchResult.js...最终在Track组件中得到渲染 */}\n            {/* 将addTrack方法作为state change method传递给SearchResult.js */}\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n            {/* 将playlist内容传递给Playlist.js...最终在Track组件中得到渲染 */}\n            {/* 将removeTrack方法作为state change method传递给Playlist.js */}\n            {/* 将onNameChange方法作为state change method传递给Playlist.js，并在该处渲染 */}\n            {/* 将onSave方法传递给Playlist.js */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var clientID=\"a6da220db2624ca192ba9aa8a9ef5485\";var redirectURI=\"http://thick-beggar.surge.sh\";var accessToken;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}//Check for an access token match\nvar accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);//This clears the parameters, allowing us to grab a new access token when it expires\nwindow.setTimeout(function(){return accessToken=\"\";},expiresIn*1000);window.history.pushState(\"Access Token\",null,\"/\");return accessToken;}else{var accessURI=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientID,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);window.location=accessURI;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{//为什么要有items??\nid:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},savePlaylist:function savePlaylist(name,trackURIs){if(!name||!trackURIs){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userID;return fetch(\"https://api.spotify.com/v1/me\",{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userID=jsonResponse.id;var playlistID;return fetch(\"https://api.spotify.com/v1/users/\".concat(userID,\"/playlists\"),{method:\"POST\",headers:headers,body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){playlistID=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/playlists/\".concat(playlistID,\"/tracks\"),{method:'POST',headers:headers,body:JSON.stringify({uris:trackURIs})});});});}};export default Spotify;","map":{"version":3,"sources":["/Users/dan/Documents/Study/Coding/Frontend/JavaScript/Practice/ReactApp/jammmingforsurge/src/util/Spotify.js"],"names":["clientID","redirectURI","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessURI","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackURIs","userID","playlistID","method","body","JSON","stringify","uris"],"mappings":"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","sourcesContent":["const clientID = \"a6da220db2624ca192ba9aa8a9ef5485\";\nconst redirectURI = \"http://thick-beggar.surge.sh\";\n\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    //Check for an access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      //This clears the parameters, allowing us to grab a new access token when it expires\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessURI = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = accessURI;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      },\n    })\n      .then((response) => {\n          return response.json();\n      })\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n          return jsonResponse.tracks.items.map((track) => ({\n            //为什么要有items??\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          }));\n      });\n  },\n\n  savePlaylist(name, trackURIs) {\n    if (!name || !trackURIs) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    let userID;\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        userID = jsonResponse.id;\n\n        let playlistID;\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n          method: \"POST\",\n          headers: headers,\n          body: JSON.stringify({ name: name })\n        })\n          .then((response) => {\n            return response.json();\n          })\n          .then((jsonResponse) => {\n            playlistID = jsonResponse.id;\n            \n            return fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\n                method: 'POST',\n                headers: headers,\n                body: JSON.stringify({ uris: trackURIs })\n            });\n          });\n      });\n  }\n\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}